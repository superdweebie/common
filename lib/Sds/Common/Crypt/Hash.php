<?php
/**
 * @link       http://superdweebie.com
 * @package    Sds
 * @license    MIT
 */
namespace Sds\Common\Crypt;

use Sds\Common\Identity\CredentialInterface;

/**
 *
 * @since   1.0
 * @author  Tim Roediger <superdweebie@gmail.com>
 *
 */
class Hash implements HashInterface {

    /**
     * Creates a sha1 hash of a string using a salt, and prepends that salt
     * to the return string
     *
     * @param string $salt
     * @param string $plaintext
     * @return string
     */
    public static function hash($salt, $plaintext){
        return sha1( (string) $salt . (string) $plaintext);
    }

    public static function hashAndPrependSalt($salt, $plaintext){
        return (string) $salt . self::hash( (string) $salt, (string) $plaintext);
    }

    /**
     * Extracts the salt from a password hash previously generated by self::hash, and
     * uses the same salt to encrypt the plaintext
     *
     * @param \Sds\Common\Identity\CredentialInterface $identity
     * @param string $plaintext
     * @param integer $saltLength
     * @return string
     */
    public static function hashCredential(CredentialInterface $identity, $plaintext, $saltLength = 30){
        $dbPassword = $identity->getCredential();
        $salt = substr($dbPassword, 0, (int) $saltLength);
        return self::hashAndPrependSalt($salt, (string) $plaintext);
    }
}

